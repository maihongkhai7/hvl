{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","Paragraph","Text","App","props","React","useState","m","sm","l","sl","email","pass","repass","u","su","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","r","status","style","display","justifyContent","alignItems","width","padding","Item","message","type","with","onSubmit","className","prefix","color","placeholder","value","onChange","target","onClick","size","block","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"0RAKQA,G,OAA2BC,IAA3BD,OAA2BC,IAApBC,UAAoBD,IAATE,KAmGXC,MAlGf,SAAaC,GAAQ,IAAD,EACLC,IAAMC,SAAS,IADV,mBACXC,EADW,KACTC,EADS,OAELH,IAAMC,UAAS,GAFV,mBAEXG,EAFW,KAETC,EAFS,OAGLL,IAAMC,SAAS,CAC1BK,MAAM,GACNC,KAAK,GACLC,OAAO,KANS,mBAGXC,EAHW,KAGTC,EAHS,KAQZC,EAAe,SAAAC,GACnBA,EAAEC,iBACCT,EACDU,MAAM,+BACN,CAACC,OAAQ,OACTC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,KAEpBW,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLpB,EAAGoB,EAAEC,WAGPV,MAAM,gCACN,CAACC,OAAQ,OACTC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,KAEpBW,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLpB,EAAGoB,EAAEC,YAIX,OACE,yBAAKC,MAAO,CAACC,QAAQ,OAAQC,eAAe,SAASC,WAAW,WAE9D,kBAAC,IAAD,CAAMH,MAAO,CAAEI,MAAO,IAAKC,QAAS,SACpC,kBAACpC,EAAD,KAAQU,EAAE,2BAAY,wBACrBF,EAAE,kBAAC,IAAK6B,KAAN,KAAW,kBAAC,IAAD,CAAOC,QAAS9B,EAAG+B,KAAK,QAAQR,MAAO,CAACS,KAAK,WAAwB,GACnF,kBAAC,IAAD,CAAMC,SAAUxB,EAAcyB,UAAU,cACtC,kBAAC,IAAKL,KAAN,KACE,kBAAC,IAAD,CACEM,OAAQ,kBAAC,IAAD,CAAMJ,KAAK,OAAOR,MAAO,CAAEa,MAAO,qBAC1CC,YAAY,QACZC,MAAO/B,EAAEH,MACTmC,SAAU,SAAC7B,GACTF,EAAG,eAAID,EAAL,CAAOH,MAAMM,EAAE8B,OAAOF,aAI9B,kBAAC,IAAKT,KAAN,KACE,kBAAC,IAAD,CACEM,OAAQ,kBAAC,IAAD,CAAMJ,KAAK,OAAOR,MAAO,CAAEa,MAAO,qBAC1CL,KAAK,WACLM,YAAY,WACZC,MAAO/B,EAAEF,KACTkC,SAAU,SAAC7B,GAAD,OAAKF,EAAG,eAAID,EAAL,CAAOF,KAAKK,EAAE8B,OAAOF,aAGzCpC,EAAE,GACF,kBAAC,IAAK2B,KAAN,KACC,kBAAC,IAAD,CACEM,OAAQ,kBAAC,IAAD,CAAMJ,KAAK,OAAOR,MAAO,CAAEa,MAAO,qBAC1CL,KAAK,WACLM,YAAY,WACZC,MAAO/B,EAAED,OACTiC,SAAU,SAAC7B,GAAD,OAAKF,EAAG,eAAID,EAAL,CAAOD,OAAOI,EAAE8B,OAAOF,aAM5C,kBAAC,IAAKT,KAAN,KACE,kBAAC,IAAD,CAAQY,QAAShC,EAAcsB,KAAK,UAAUW,KAAK,QAAQC,OAAK,EAACT,UAAU,qBAC1EhC,EAAE,2BAAY,wBAEf,kBAAC,IAAD,CAAQuC,QAAS,kBAAItC,GAAID,IAAI6B,KAAK,OAAOY,OAAK,EAACT,UAAU,qBACtDhC,EAAE,6BAAgB,+BAM3B,kBAAC,IAAD,QCpFgB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.f2f951e6.chunk.js","sourcesContent":["import React from 'react';\nimport {Switch,Redirect,Route,Link} from 'react-router-dom'\nimport { Typography, Alert, Divider,Card, Input,Form, Icon, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { Title, Paragraph, Text } = Typography;\nfunction App(props) {\n  const [m,sm]=React.useState('')\n  const [l,sl]=React.useState(true)\n  const [u,su]=React.useState({\n    email:'',\n    pass:'',\n    repass:''\n  })\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(l){\n      fetch('http://184.21.172/auth/login',\n      {method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(u)}\n      )\n      .then((response) => {\n        return response.json();\n      })\n      .then((r) => {\n        sm(r.status)\n      });\n    }else{\n      fetch('http://184.21.172/auth/signup',\n      {method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(u)}\n      )\n      .then((response) => {\n        return response.json();\n      })\n      .then((r) => {\n        sm(r.status)\n      });\n    }\n  };\n  return (\n    <div style={{display:'flex', justifyContent:'center',alignItems:'center',}}>\n    \n      <Card style={{ width: 400, padding: '30px' }}>\n      <Title>{l?'Đăng Nhập':'Đăng Ký'}</Title>\n      {m?<Form.Item><Alert message={m} type=\"error\" style={{with:'100%'}} /></Form.Item>:''}\n      <Form onSubmit={handleSubmit} className=\"login-form\">\n        <Form.Item>\n          <Input\n            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            placeholder=\"Email\"\n            value={u.email}\n            onChange={(e)=>{\n              su({...u,email:e.target.value})\n            }}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Input\n            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            type=\"password\"\n            placeholder=\"Password\"\n            value={u.pass}\n            onChange={(e)=>su({...u,pass:e.target.value})}\n          />\n        </Form.Item>\n        {l?'':\n         <Form.Item>\n          <Input\n            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            type=\"password\"\n            placeholder=\"Password\"\n            value={u.repass}\n            onChange={(e)=>su({...u,repass:e.target.value})}\n          />\n        </Form.Item>\n        }\n        \n        \n        <Form.Item>\n          <Button onClick={handleSubmit} type=\"primary\" size='large' block className=\"login-form-button\">\n          {l?'Đăng Nhập':'Đăng Ký'}\n          </Button>\n          <Button onClick={()=>sl(!l)} type=\"link\" block className=\"login-form-button\">\n            {l?'Đăng ký ngay!':'Đăng Nhập'}\n          </Button>\n        </Form.Item>\n        \n      </Form>\n     </Card>\n    <Typography>\n    \n    </Typography>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}